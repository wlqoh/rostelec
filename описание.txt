смотри, есть проект:
1.Название кейса. «Технологии в каждом решении»
2.Проблема (описание проблемы, которая требует своего решения).
Формирование единой базы данных, как инструмент для продвижения продаж цифровых услуг. 
3. Цель: создать платформу для формирования единой базы данных по всем потребностям, конкретным запросам, ожиданиям от услуг у клиентов, например, конкретного МКД или конкретного отеля, гостевого домика, кафе, ресторана, что очень актуально в рамках развития туристического кластера в Дагестане. Приложением могут пользоваться все операторы связи (интернет-провайдеры). 
Задача: создать веб-приложение с авторизацией и адаптивным дизайном (под мобильные устройства), которое позволяет собирать, хранить и анализировать информацию о запросах и ожиданиях клиентов.
Ситуация: инсталлятор, вооружённый информацией о предыдущих визитах, знает запросы клиентов, их ожидания, например,
- «Здравствуйте, уважаемая тетя Анисат! Помните, весной вы хотели подключить видеонаблюдение, чтобы выявлять, кто в подъезде оставляет мусор, шумит, пачкает стены? Наш сотрудник рассказывал вам о возможностях, но цена показалась высокой? Сегодня у нас для вас невероятное предложение! Только сейчас, в течение 20 дней, мы дарим 50% скидку на установку системы видеонаблюдения! Не упустите этот шанс, сделайте свой подъезд безопасным прямо сейчас!"
- «Добрый день, уважаемый Магомед Магомедович. Вы планировали подключить в вашем гостевом домике/отеле/коттедже систему видеонаблюдения/цифровое тв на каждом этаже и т.д. Сейчас у нас идут скидки на эти услуги. Предлагаем Вам рассмотреть наши предложения».
4. Пользователи (для кого разрабатывается кейс, кто будет пользоваться решением): приложение должно облегчить работу инженеров и менеджеров по продажам при сборе клиентской информации и формировании аналитических отчетов для управления продажами (например, в «Ростелекоме»).

5. Архитектура и технологии
- Backend: Python (FastAPI / Django REST Framework)
- Frontend: React / Vue / чистый JavaScript + TailwindCSS (адаптивная верстка)
- База данных: PostgreSQL или SQLite (для прототипа)
- Авторизация: JWT или OAuth2
- Отчеты: openpyxl (экспорт XLSX)
- Геолокация: через браузерный API (HTML5 Geolocation)
- Деплой: Docker или любой облачный сервис (Render / Railway / Vercel / Deta) Основные функции

5.1. Функционал для инженера / полевого сотрудника
- Авторизация по логину и паролю.
- Выбор города и объекта (в т.ч. с возможностью добавить новый дом, указав адрес и GPS-координаты).
- Форма заполнения данных по объекту:
  1. Номер квартиры
  2. Описание портрета клиента (например, мужчина 40 лет, безработный)
  3. Чем пользуется: Интернет, ТВ, Видеонаблюдение, Интернет-няня
  4. Оценка текущего провайдера (шкала 1–5 или вариантами «удовлетворен / не удовлетворен»)
  5. Интерес к услугам интернет-провайдера, например, Ростелекома (какие именно услуги интересуют)
  6. Удобное время для связи
  7. Контактный телефон
  8. Желаемая справедливая цена за интернет
  9. Примечание (произвольный комментарий инженера)
- Возможность редактировать или дополнять данные при повторном визите.
- Автоматическое определение GPS-координат и сохранение их в базе.
- Кэширование данных при отсутствии интернета (офлайн-режим с последующей синхронизацией).
  10. Возможность просмотра комментариев, сохраненных ранее по данному объекту/ квартире

5.2. Фунционал для администратора
- Панель управления (админка) с возможностями:
  - Просмотр всех объектов и анкет.
  - Фильтрация данных по: городу, объекту, дате визита, статусу клиента, интересу к конкретному провайдеру и т.д.
  - Формирование и выгрузка отчетов в формате XLSX:
    • по конкретному объекту/дому;
    • по всем объектам/домам города;
    • по кастомной выборке (например, “указать, где интерес к интернету есть, но клиент просил перезвонить через 2 месяца, и срок уже наступил”).
  - Просмотр статистики (графики, диаграммы):
    • количество объектов по статусам;
    • уровень удовлетворенности провайдерами;
    • доля потенциальных клиентов по районам;
    • динамика визитов по времени.

5.3. Дополнительный функционал (по возможности)
- Ролевая модель доступа: инженер, супервайзер, администратор.
- История изменений данных (кто и когда редактировал).
- Интеграция с Telegram-ботом для уведомлений менеджеров.
- Темная тема / PWA-режим.
- API-документация (Swagger).

5.4. Результаты и критерии оценки
- Рабочее адаптивное веб-приложение.
- Корректная авторизация и сохранение данных.
- Возможность выгрузки отчетов в Excel.
- Понятная структура кода и документация.
- Демо-данные для теста.

5.5. Команда и роли
- Backend-разработчик
- Frontend-разработчик
- Дизайнер
- Аналитик / продакт
- Data-инженер (по желанию для аналитики)

5.6. Дополнительные идеи
- Интерактивная карта объектов (Leaflet / Yandex Maps API)
- AI-помощник для приоритизации клиентов
- Импорт данных из Excel
- QR-доступ для инженеров
- Уведомления о новых клиентах (email / Telegram)


нужен сайт типо срм системы, в котором в десктоп будет админ панель администратора, с вышеописанным функционалом, а также возможностью добавления новых пользователей - тех кто заносит данные клиентов. в мобильном варианте должен быть функционал заноса клиентов как описано в тз выше.      

от тебя требуется расписать ux сайта /_admin для админ панели и /cabinet для полевого инженера. дизайн минимализм следуя всем современным трендам дизайна, необходимо корректное отображение всех страниц. на мобильном варианте должно быть снизу бар как в приложениях. озвучь как понял и приступай. 
Думал на протяжении 12s
Вы сказали:
окей теперь от тебя нужно составить промт для loveble.dev чтобы он сделал мне сайт как я хочу. дизайн минимализм следуя всем современным трендам дизайна, цветовую палитру по его усмотрению, полный адаптив и корректное отображение всех страниц. на мобильном варианте должно быть снизу бар как в приложениях. при этом не нужно реализовывать саму аутентификацию, упор на сами страницы, их функционал озвучь как понял и приступай.